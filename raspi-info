#!/bin/bash

#################################################################################
#                                   _       _        __                         #
#               _ __ __ _ ___ _ __ (_)     (_)_ __  / _| ___                    #
#              | '__/ _` / __| '_ \| |_____| | '_ \| |_ / _ \                   #
#              | | | (_| \__ \ |_) | |_____| | | | |  _| (_) |                  #
#              |_|  \__,_|___/ .__/|_|     |_|_| |_|_|  \___/                   #
#                            |_|                                                #
#                                                                               #
#                                                                               #
# MIT License                                                                   #
# Copyright (c) 2019-2025 Massimo Pissarello                                    #
#                                                                               #
#################################################################################


##### VARIABLES AT BEGINNING FOR CORRECT MEASUREMENT!!!
# CPU frequency
CPUNOW=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq`
# Temperature
CPUTEMP=$(cat /sys/class/thermal/thermal_zone0/temp)
#######################################################
RASPMOD=$(tr -d '\0' </proc/device-tree/model)
BOOTLD=$(vcgencmd bootloader_version | head -1)
MEMTOT=$((`grep -i MemTotal /proc/meminfo | cut -f1 -dk | cut -f2 -d:` / (1024*1024) + 1))

clear

# ROOT CHECK
if [[ ! "${EUID}" -eq 0 ]]; then
	echo && echo "Sorry but raspi-info requires elevated privileges to run."
	echo "Please restart as root user or with sudo command." && echo
	sleep 1 && exit 1
fi

VERSION=$(dpkg -s raspi-info | grep '^Version:' | awk '/:/ {print $2}')
figlet "raspi-info $VERSION"
echo

# System
if [[ "$RASPMOD" == "Raspberry Pi 4"* ]] || [[ "$RASPMOD" == "Raspberry Pi Compute Module 4"* ]] || [[ "$RASPMOD" == "Raspberry Pi 400"* ]] || [[ "$RASPMOD" == "Raspberry Pi 5"* ]]; then
	echo -e '\e[33m'"$RASPMOD with ${MEMTOT}GB RAM / Bootloader date: $BOOTLD"; else
	echo -e '\e[33m'"$RASPMOD"; fi

HARDWARE=$(cat /proc/cpuinfo | grep -i Hardware | cut -d " " -f 2)
REVISION=$(cat /proc/cpuinfo | grep Revision | cut -d " " -f 2)
SERIAL=$(cat /proc/cpuinfo | grep Serial | cut -d " " -f 2)

if [[ -n "$HARDWARE" ]]; then
	echo -e '\e[32m'"Hardware: $HARDWARE / Revision: $REVISION / Serial number: $SERIAL"; else
	echo -e '\e[32m'"Revision: $REVISION / Serial number: $SERIAL"; fi

echo -e "Operative system: `lsb_release -d | awk '/Description:/ {printf "%s %s ", $2, $3}' && cat /etc/debian_version | tr -d '\n' && lsb_release -d | awk '/Description:/ {printf " %s", $5}'` / Architecture: `uname -m`"
echo -e "Kernel version: `uname -r` (`uname -v`)"
echo -e `bash --version | head -n 1`

# Uptime and load average
echo -e "Load average (1m, 5m, 15m)`uptime | awk -F'[a-z]:' '{print $2}'` / Uptime `uptime -p | sed "s/^[^ ]* //"`"

# Startup time
systemd-analyze | head -n 1

# Package
if ls /var/lib/apt/lists/*_Packages >/dev/null 2>&1; then
	echo -e "You have `dpkg --get-selections | wc -l` deb packages installed (total available is `grep ^Package /var/lib/apt/lists/*_Packages | wc -l`)"
else echo -e "You have `dpkg --get-selections | wc -l` deb packages installed"
fi

# Apcupsd
if [ -f /sbin/apcupsd ]; then
	echo -e '\e[94m'"Line voltage: "`apcaccess | grep LINEV | awk '{print $3,$4}'` "/ Line frequency: "`apcaccess | grep LINEFREQ | awk '{print $3,$4}'` "/ Battery power: "`apcaccess | grep NOMPOWER | awk '{print $3,$4}'`
	echo "Battery charge: "`apcaccess | grep BCHARGE | awk '{print $3,$4}'` "/ Load battery: "`apcaccess | grep LOADPCT | awk '{print $3,$4}'` "/ Time left: "`apcaccess | grep TIMELEFT | awk '{print $3,$4}'`
fi
echo -e '\e[0m'

# Temperature monitoring function with graphical representation
# Get temperature - works for both root and non-root users
readonly CPUTEMP_VALUE=$(cat /sys/class/thermal/thermal_zone0/temp)
readonly CPU_TEMP_CELSIUS=$((CPUTEMP_VALUE / 1000))
readonly CPU_TEMP_DECIMAL=$((CPUTEMP_VALUE % 1000 / 10))
readonly CPU_TEMP_FORMATTED="${CPU_TEMP_CELSIUS}.${CPU_TEMP_DECIMAL}°C"

# Define temperature thresholds
readonly TEMP_LOW=45
readonly TEMP_NORMAL=55
readonly TEMP_HIGH=65
readonly TEMP_CRITICAL=75

# Create visual bar graph based on temperature
readonly BAR_LENGTH=20
readonly TEMP_PERCENTAGE=$((CPU_TEMP_CELSIUS * 100 / TEMP_CRITICAL))  # Scale based on critical temp
readonly FILLED_BLOCKS=$((TEMP_PERCENTAGE * BAR_LENGTH / 100))

# Create the bar with gradient effect
BAR="["
for ((i=0; i<BAR_LENGTH; i++)); do
	if [ $i -lt $FILLED_BLOCKS ]; then
		if [ $CPU_TEMP_CELSIUS -lt $TEMP_LOW ]; then
			BAR="${BAR}█"  # Full block for better visibility
		elif [ $CPU_TEMP_CELSIUS -lt $TEMP_NORMAL ]; then
			BAR="${BAR}█"
		elif [ $CPU_TEMP_CELSIUS -lt $TEMP_HIGH ]; then
			BAR="${BAR}█"
		else
			BAR="${BAR}█"
		fi
	else
		BAR="${BAR}░"  # Light shade for empty space
	fi
done
BAR="${BAR}]"

# Set color and message based on temperature
if [ "$CPUTEMP_VALUE" -lt $((TEMP_LOW * 1000)) ]; then
	echo -e '\e[36m'"CPU ${CPU_TEMP_FORMATTED} $BAR LOW TEMPERATURE"'\e[0m'
elif [ "$CPUTEMP_VALUE" -lt $((TEMP_NORMAL * 1000)) ]; then
	echo -e '\e[32m'"CPU ${CPU_TEMP_FORMATTED} $BAR NORMAL TEMPERATURE"'\e[0m'
elif [ "$CPUTEMP_VALUE" -lt $((TEMP_HIGH * 1000)) ]; then
	echo -e '\e[33m'"CPU ${CPU_TEMP_FORMATTED} $BAR NORMAL-HIGH TEMPERATURE"'\e[0m'
elif [ "$CPUTEMP_VALUE" -lt $((TEMP_CRITICAL * 1000)) ]; then
	echo -e '\e[31m'"CPU ${CPU_TEMP_FORMATTED} $BAR HIGH TEMPERATURE!"'\e[0m'
else
	echo -e '\e[31m\e[1m'"CPU ${CPU_TEMP_FORMATTED} $BAR CRITICAL TEMPERATURE! SHUTDOWN RECOMMENDED!"'\e[0m'

	# Log critical temperature event if logging is available and we're root
	if [ -d "/var/log" ] && [ $(id -u) -eq 0 ]; then
		echo "$(date): CRITICAL TEMPERATURE ALERT: ${CPU_TEMP_FORMATTED}" >> /var/log/raspi-temp-alerts.log
	fi
fi

# Display throttling status if available (requires vcgencmd which usually needs root)
if command -v vcgencmd &> /dev/null && [ $(id -u) -eq 0 ]; then
	THROTTLED=$(vcgencmd get_throttled)
	THROTTLE_CODE=$(echo $THROTTLED | cut -d'=' -f2)

	if [ "$THROTTLE_CODE" != "0x0" ]; then
		echo -e '\e[33m'"Throttling detected: $THROTTLED"'\e[0m'

		# Decode throttling flags
		[ $((0x$THROTTLE_CODE & 0x1)) -ne 0 ] && echo -e '\e[33m'" - Under-voltage detected"'\e[0m'
		[ $((0x$THROTTLE_CODE & 0x2)) -ne 0 ] && echo -e '\e[33m'" - ARM frequency capped"'\e[0m'
		[ $((0x$THROTTLE_CODE & 0x4)) -ne 0 ] && echo -e '\e[33m'" - Currently throttled"'\e[0m'
		[ $((0x$THROTTLE_CODE & 0x8)) -ne 0 ] && echo -e '\e[33m'" - Soft temperature limit active"'\e[0m'
	fi
fi

# Volt and RAM
if [[ "$RASPMOD" == "Raspberry Pi 4"* ]]; then
	echo -e '\e[36m'"CPU `vcgencmd measure_volts core` / RAM `vcgencmd measure_volts sdram_p` / RAM dedicated to `vcgencmd get_mem gpu`B"
else
	echo -e '\e[36m'"CPU `vcgencmd measure_volts core` / RAM `vcgencmd measure_volts sdram_p` / RAM dedicated to `vcgencmd get_mem arm`B / RAM dedicated to `vcgencmd get_mem gpu`B"
fi

# CPU frequency
CPUMIN=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq`
CPUMAX=`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`
CPUGOV=`cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor | awk '{printf "%s ",$1}'`
echo -e "CPU has `nproc` core and frequency now is `expr $CPUNOW / 1000` MHz (range is from `expr $CPUMIN / 1000` MHz to `expr $CPUMAX / 1000` MHz)"
echo -e "CPU scaling governor is $CPUGOV"
echo

# Complete RAM data
echo -e '\e[0m'"RAM usage and Swap in MB"
echo -e '\e[33m'"`free --mega -tl`"
echo -e '\e[0m'

# Lsmod
echo -e '\e[0m'"Kernel modules"
echo -e '\e[36m'"`lsmod | sort | awk '!/Module/' | awk '{printf "%s ",$1}' | fmt --width=80`"
echo -e '\e[0m'

# List USB
echo -e '\e[0m'"USB devices"
echo -e '\e[36m'"`lsusb`"
echo -e '\e[0m'


# Check IP, whois, gateway.....
INTERFACE=$(ip -o -f inet addr show | awk '/scope global/ {print $2, $4}')
BROADCAST=$(ip -o -f inet addr show | awk '!/scope host lo/' | awk '!/scope global wg/ {print $2, $6}')
DOMAIN=$(cat /etc/resolv.conf | grep domain | awk '{print $2}')
SEARCH=$(cat /etc/resolv.conf | grep search | awk '{print $2}')
NAMESERVERS=$(cat /etc/resolv.conf | grep 'nameserver ' | awk '{print $2}')

# Create interfaces
echo -e -n '\e[0m\e[1m'"Internal IP:" '\e[36m\e[1m'$INTERFACE

# WLAN quality
if [[ $INTERFACE =~ wlan0 ]]; then
	echo -e -n '\e[33m'" "
	iwgetid
	iwconfig wlan0 | grep -i "Bit Rate" | sed -e 's/^\s*//' -e '/^$/d' # REMOVE TAB
	iwconfig wlan0 | grep -i "Link Quality" | sed -e 's/^\s*//' -e '/^$/d' # REMOVE TAB
else
	echo
fi

echo "`ip -o -f inet addr show | awk '/scope global/ {print $2}'`" > /tmp/interfaces

# MAC address
printf '\e[0m'"MAC address: "
while read -r IFACE; do
	printf '\e[36m'$IFACE && printf " `cat /sys/class/net/$IFACE/address` "
	if [[ $IFACE = "tun0" ]]; then
		echo -e "\bnot available\c"; fi
	if [[ $IFACE = "wg0" ]]; then
		echo -e "\bnot available\c"; fi
done < /tmp/interfaces
echo

# Traffic data
printf '\e[0m'"Traffic data: "
while read -r IFACE; do
	RX=`cat /sys/class/net/$IFACE/statistics/rx_bytes`
	TX=`cat /sys/class/net/$IFACE/statistics/tx_bytes`
	printf '\e[36m'$IFACE && printf " RX=`expr $RX / 1048576`Mb-"
	printf "TX=`expr $TX / 1048576`Mb "
done < /tmp/interfaces
echo

# Speed
sed -i '/wg0/d' /tmp/interfaces && sed -i '/wlan0/d' /tmp/interfaces
if [ -s /tmp/interfaces ]; then
	echo -e -n '\e[0m'"Speed: "'\e[36m'
	while read -r IFACE; do
		echo -n "$IFACE `ethtool $IFACE | grep -i speed | awk '{print $2}'` "
	done < /tmp/interfaces
	echo
fi

# Print connection data
echo -e '\e[0m'"Broadcast (or peer):" '\e[36m'$BROADCAST

if [[ $DOMAIN = "" ]]; then
	echo -e -n '\e[0m'"Domain: " '\e[36m'"\bnot available\c"
else
	echo -e -n '\e[0m'"Domain:" '\e[36m'$DOMAIN
fi
if [[ $SEARCH = "" ]]; then
	echo -e -n '\e[0m'" Search: " '\e[36m'"\bnot available\c";	echo
else
	echo -e -n '\e[0m'" Search:" '\e[36m'$SEARCH; echo
fi

stringarray=($NAMESERVERS)
echo -e -n '\e[0m'"Name Servers:" '\e[36m'
for i in "${stringarray[@]}"; do
	echo -e "$i (ping: `ping -c 1 $i | awk -F '/' 'END {print $5}'` ms) "; done

echo && echo -e '\e[33m'"********* Please wait: trying to get advanced Internet information *********"

# Check Internet and IP
echo
EXTIP=$(dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | sed -e 's/^"//' -e 's/"$//')
ping -c 1 google.com &> /dev/null && echo -e "\e[32mInternet connected with IP \e[1m$EXTIP \e[0m\e[91m(traceroute hops: `traceroute $EXTIP | wc -l`)" && echo -e '\e[0m'"\e[95m`$(traceroute $EXTIP > /tmp/trace) && tail -n +2 /tmp/trace`" && echo -e '\e[32m'Whois: '\e[94m'`whois $EXTIP | grep -m 1 owner: | awk '{print $2,$3,$4,$5}'` "\b"`whois $EXTIP | grep -m 1 netname: | awk '{print $2,$3,$4,$5}'` '\e[32m'Address: '\e[94m'`whois $EXTIP | grep -m 2 address: | awk '{print $2,$3,$4,$5,$6,$7,$8,$9}'` '\e[32m'Country: '\e[94m'`whois $EXTIP | grep -m 1 country: | awk '{print $2}'` || echo -e "\e[31m\e[1mInternet not connected"

# Kernel IP routing table
echo
echo -e '\e[0m'"Kernel IP routing table"'\e[091m'
route -n | grep -v "Kernel IP"
echo

# Wireguard
if [[ -f "/etc/wireguard/wg0.conf" ]]; then
	if [[ -z `wg` ]]; then
		:
	else
		echo -e '\e[33m'"Wireguard VPN tunnel"
		echo -e '\e[0m'"Public key: "'\e[36m'"`wg | grep "public key" | awk '{print $3}'`"
		echo -e '\e[0m'"Listening port: "'\e[36m'"`wg show | grep "listening port" | awk '{print $3}'`"
		echo -e '\e[0m'"Peer: "'\e[36m'"`wg | grep peer | awk '{print $2}'`"
		echo -e '\e[0m'"Endpoint: "'\e[36m'"`wg | grep endpoint | awk '{print $2}'`"
		echo -e '\e[0m'"Allowed IP: "'\e[36m'"`wg | grep "allowed ips" | awk '{print $3}'`"
		echo -e '\e[0m'"Latest handshake: "'\e[36m'"`wg | grep "latest handshake" | awk '{print $3,$4,$5,$6,$7,$8,$9,$10,$11}'`"
		echo
	fi
fi

# Ping various server
echo -e '\e[0m'"Time to ping world common servers and DNS"
echo -e '\e[94m'"google.com `ping -c 1 google.com | tail -c 23 | head -c 4` ms / youtube.com `ping -c 1 youtube.com | tail -c 23 | head -c 4` ms / instagram.com `ping -c 1 instagram.com | tail -c 23 | head -c 4` ms / amazon.com `ping -c 1 amazon.com | tail -c 23 | head -c 4` ms"
echo -e "DNS Google (8.8.8.8) `ping -c 1 8.8.8.8 | tail -c 23 | head -c 4` ms / DNS Quad9 (9.9.9.9) `ping -c 1 9.9.9.9 | tail -c 23 | head -c 4` ms / DNS CloudFlare (1.1.1.1) `ping -c 1 1.1.1.1 | tail -c 23 | head -c 4` ms"
echo -e '\e[32m'

# File system
df -h | grep -v "udev"

# List all sd
echo
fdisk -l | grep Linux | grep -v swap | awk '/\/dev\/mm/ {print $1}' > /tmp/sd
fdisk -l | grep Linux | grep -v swap | awk '/\/dev\/sd/ {print $1}' >> /tmp/sd
while read SD; do
	echo -e '\e[33m'"Partition "$SD
	echo -e -n '\e[96m'`tune2fs -l $SD | grep Filesystem\ created`"	"`tune2fs -l $SD | grep Last\ mount\ time`
	echo && echo `tune2fs -l $SD | grep Last\ checked`"		"`tune2fs -l $SD | grep Mount\ count`"		"`tune2fs -l $SD | grep Filesystem\ state`
	echo -e `tune2fs -l $SD | grep Maximum\ mount`"		"`tune2fs -l $SD | grep Check\ interval`"		"'\e[91m'`tune2fs -l $SD | grep Lifetime`
done < /tmp/sd
echo -e '\e[0m'

# Directory used space
BASEDIR=/
NUMFOL=10
count=1
echo -e "These are the ${NUMFOL} biggest directories and files located in your Raspberry Pi"
du -a --max-depth=3 -x ${BASEDIR} | sort -rn | sed "1d" | head -"${NUMFOL}" |
while read size ndir; do
	size="$(( size / 1024 ))"
	echo -e '\e[95m'"Number ${count}: ${ndir} is ${size} Mb"
	((count++))
done
echo -e '\e[0m'

# Last login
NUMLOGIN=5
echo -e '\e[0m'"Last $NUMLOGIN users login"'\e[33m'
last -F -n $NUMLOGIN | grep -v "wtmp"

# About date
echo -e '\e[36m'"\c" && ncal -3 -M
echo && echo -e '\e[32m'"Time now is `date +"%H:%M:%S"` in `timedatectl | awk '/Time zone:/ {print $3, $4, $5}'`"
echo -e "Days from beginning of year `date +"%j"` / Weeks from beginning of year `date +"%W"`"'\e[91m\e[1m'
echo -e '\e[0m'

# Bitcoin
#BTCUSD=`curl -sk https://api.coindesk.com/v1/bpi/currentprice/usd.json | jq -r .bpi.USD.rate | tail -c +1 | head -c -1 | rev | cut -c3- | rev`
#echo -e '\e[40;38;5;82m'" 1 Bitcoin = "$BTCUSD" USD "'\e[0m'

# Tips and random color for fitglet
TIP=/usr/lib/raspi-info/shell-tips
FIGLETCOLOR=`shuf -i91-96 -n1`
echo -e '\e[44m\e[1m'" Shell tip: `shuf -n 1 $TIP` "'\e[0m\e['$FIGLETCOLOR'm'

# Print hostname
figlet `hostname -s`

# Check version
UPVER=$(curl -sSfL https://raw.githubusercontent.com/mapi68/raspi-info/master/version)
VERSION=$(dpkg -s raspi-info | grep '^Version:' | awk '/:/ {print $2}')
if [[ "$VERSION" -lt "$UPVER" ]]; then
	echo -e '\e[1;33m'"NEW VERSION AVAILABLE: please run 'raspi-info-update'"; fi

# Need reboot?
if [ -f /var/run/reboot-required ]; then
	echo -e '\e[1;31m'"***** SYSTEM RESTART REQUIRED *****"; fi

echo -e '\e[0m'"\c"
echo

rm -f /tmp/interfaces /tmp/sd /tmp/trace
